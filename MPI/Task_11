#include<mpi.h>
#include<iostream>
#include <cstdlib>

int main(int argc, char** argv){
    int rank, comm_size;
        MPI_Init(NULL, NULL);

        MPI_Comm_rank(MPI_COMM_WORLD, &rank);
        MPI_Comm_size(MPI_COMM_WORLD, &comm_size);

        int* send = new int[1];
        int* receive = new int[1];
        if (rank == 0) {
            send[0] = 0;
            MPI_Send(send, 1, MPI_INT, rank + 1, rank + 1, MPI_COMM_WORLD);
        }
        if (rank != 0) {
            MPI_Recv(receive, 1, MPI_INT, rank - 1, rank, MPI_COMM_WORLD, MPI_STATUSES_IGNORE);
            send[0] = receive[0] + 5;
            if (rank != comm_size - 1)
                MPI_Send(send, 1, MPI_INT, rank + 1, rank + 1, MPI_COMM_WORLD);
            else
                MPI_Send(send, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
        }
        if (rank == 0) {
            MPI_Recv(receive, 1, MPI_INT, comm_size - 1, 0, MPI_COMM_WORLD, MPI_STATUSES_IGNORE);
            printf("result = %d\n", receive[0]);
        }

        MPI_Finalize();
        return 0;
    }
