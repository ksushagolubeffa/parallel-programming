#include<mpi.h>
#include<iostream>
#include <cstdlib>
#include <limits>

int main(int argc, char** argv){
    const int n = 8;

        int matrix[n][n];

        int maxmin = -1, minmax = 1000000;
        int local_maxmin = maxmin;
        int local_minmax = minmax;

        int rank, comm_size;

        MPI_Init(NULL, NULL);
        MPI_Comm_rank(MPI_COMM_WORLD, &rank);
        MPI_Comm_size(MPI_COMM_WORLD, &comm_size);

        int local_size = n / comm_size;
        int *localMinimums = new int[local_size];
        int *localMaximums = new int[local_size];
        int part_to_process[local_size][n];
        int *sendcounts = new int[comm_size];
        int *displs = new int[comm_size];

        if (rank == 0) {
            printf("Local size = %d\n", local_size);
            srand(time(NULL));
            for (int i = 0; i < n; ++i) {
                printf("| ");
                for (int j = 0; j < n; ++j) {
                    matrix[i][j] = rand() % 10;
                    printf("%d ", matrix[i][j]);
                }
                printf("|\n");
            }

            sendcounts[0] = local_size*n;
            displs[0] = 0;

            for (int i = 1; i < comm_size; i++) {
                if (i == comm_size-1){
                    sendcounts[i] = n*n - local_size*i*n;
                } else{
                    sendcounts[i] = local_size*n;
                }
                displs[i] = displs[i - 1] + sendcounts[i - 1];
            }
        }
        MPI_Scatterv(&matrix[0][0], sendcounts, displs, MPI_INT, &part_to_process[0][0], local_size*n, MPI_INT, 0,
                    MPI_COMM_WORLD);
        MPI_Barrier(MPI_COMM_WORLD);

        for (int i = 0; i < local_size; ++i) {
            int localMin = 1000000;
            int localMax = -1;
            for (int j = 0; j < n; ++j) {
                if (localMin > part_to_process[i][j]) localMin = part_to_process[i][j];
                if (localMax < part_to_process[i][j]) localMax = part_to_process[i][j];
            }
            localMinimums[i] = localMin;
            localMaximums[i] = localMax;
        }
        for (int i = 0; i < local_size; ++i) {
            if (local_maxmin < localMinimums[i]) local_maxmin = localMinimums[i];
            if (local_minmax > localMaximums[i]) local_minmax = localMaximums[i];
        }

        printf("%d#Local maxmin = %d, local minmax = %d\n",rank, local_maxmin, local_minmax);

        MPI_Reduce(&local_maxmin, &maxmin, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);
        MPI_Reduce(&local_minmax, &minmax, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);

        if (rank == 0) {
            printf("maxmin = %d, minmax = %d\n", maxmin, minmax);
        }
        MPI_Finalize();
        return 0;
    }
