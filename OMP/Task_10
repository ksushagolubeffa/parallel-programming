#include <iostream>
#include <omp.h>
#include <random>

int main() {
    const int rows = 6;
    const int columns = 8;
    int d[rows][columns];

    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(1, 100);

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < columns; ++j) {
            d[i][j] = dis(gen);
        }
    }

    int minVal = d[0][0];
    int maxVal = d[0][0];

    #pragma omp parallel for
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < columns; ++j) {
            #pragma omp critical
            {
                if (d[i][j] < minVal) {
                    minVal = d[i][j];
                }

                if (d[i][j] > maxVal) {
                    maxVal = d[i][j];
                }
            }
        }
    }

    std::cout << "Min value: " << minVal << std::endl;
    std::cout << "Max value: " << maxVal << std::endl;

    return 0;
}
